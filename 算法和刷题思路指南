这篇文章就是希望对数据结构和算法建立一个框架性的认识。
从整体到细节，自顶向下，从抽象到具体的框架思维是通用的，不只是学习数据结构和算法，学习其他任何知识都是高效的。

一. 数据结构的存储方式
数据结构的存储方式只有两种:数组(顺序存储)和链表(链式存储)。这句话怎么理解，不是还有散列表、栈、队列、堆、树、图等等各种数据结
构吗?
我们分析问题，一定要有递归的思想，自顶向下，从抽象到具体。你上来就 列出这么多，那些都属于「上层建筑」，而数组和链表才是「结构基础」。
 因为那些多样化的数据结构，究其源头，都是在链表或者数组上的特殊操 作，API 不同而已。
 比如说「队列」、「栈」这两种数据结构既可以使用链表也可以使用数组实现。用数组实现，就要处理扩容缩容的问题;
 用链表实现，没有这个问题，但需要更多的内存空间存储节点指针。

「图」的两种表示方法，邻接表就是链表，邻接矩阵就是二维数组。邻接矩阵判断连通性迅速，并可以进行矩阵运算解决一些问题，
但是如果图比较稀疏的话很耗费空间。邻接表比较节省空间，但是很多操作的效率上肯定比不过邻接矩阵。

「散列表」就是通过散列函数把键映射到一个大数组里。而且对于解决散列冲突的方法，拉链法需要链表特性，操作简单，但需要额外的空间存储指针;
线性探查法就需要数组特性，以便连续寻址，不需要指针的存储空间，但操作稍微复杂些。

「树」，用数组实现就是「堆」，因为「堆」是一个完全二叉树，用数组存 储不需要节点指针，操作也比较简单;用链表实现就是很常⻅的那种 「树」，
因为不一定是完全二叉树，所以不适合用数组存储。为此，在这种 链表「树」结构之上，又衍生出各种巧妙的设计，
比如二叉搜索树、AVL 树、红黑树、区间树、B 树等等，以应对不同的问题。

综上，数据结构种类很多，甚至你也可以发明自己的数据结构，但是底层存 储无非数组或者链表，二者的优缺点如下:
数组由于是紧凑连续存储,可以随机访问，通过索引快速找到对应元素，而 且相对节约存储空间。
但正因为连续存储，内存空间必须一次性分配够，所 以说数组如果要扩容，需要重新分配一块更大的空间，再把数据全部复制过 去，
时间复杂度 O(N);而且你如果想在数组中间进行插入和删除，每次必 须搬移后面的所有数据以保持连续，时间复杂度 O(N)。

链表因为元素不连续，而是靠指针指向下一个元素的位置，所以不存在数组 的扩容问题;如果知道某一元素的前驱和后驱，
操作指针即可删除该元素或 者插入新元素，时间复杂度 O(1)。但是正因为存储空间不连续，你无法根 据一个索引算出对应元素的地址，
所以不能随机访问;而且由于每个元素必 须存储指向前后元素位置的指针，会消耗相对更多的储存空间。

二. 数据结构的基本操作
对于任何数据结构，其基本操作无非遍历 + 访问，再具体一点就是:增删 查改。
数据结构种类很多，但它们存在的目的都是在不同的应用场景，尽可能高效 地增删查改。话说这不就是数据结构的使命么?
如何遍历 + 访问?我们仍然从最高层来看，各种数据结构的遍历 + 访问无 非两种形式:线性的和非线性的。
线性就是 for/while 迭代为代表，非线性就是递归为代表。再具体一步，无 非以下几种框架:

数组遍历框架，典型的线性迭代结构:
void traverse(int[] arr) {
    for (int i = 0; i < arr.length; i++) {
        // 迭代访问 arr[i]
    }
}

链表遍历框架，兼具迭代和递归结构:
/* 基本的单链表节点 */
class ListNode {
    int val;
    ListNode next;
}
void traverse(ListNode head) {
    for (ListNode p = head; p != null; p = p.next) {
        // 迭代访问 p.val
   }
}
void traverse(ListNode head) {
    // 递归访问 head.val
    traverse(head.next)
}

二叉树遍历框架，典型的非线性递归遍历结构:
/* 基本的二叉树节点 */
class TreeNode {
    int val;
    TreeNode left, right;
}
void traverse(TreeNode root) {
    traverse(root.left)
    traverse(root.right)
}

你看二叉树的递归遍历方式和链表的递归遍历方式，相似不?再看看二叉树 结构和单链表结构，相似不?如果再多几条叉，N 叉树你会不会遍历?
二叉树框架可以扩展为 N 叉树的遍历框架:
/* 基本的 N 叉树节点 */
class TreeNode {
    int val;
    TreeNode[] children;
}
void traverse(TreeNode root) {
    for (TreeNode child : root.children)
}

N 叉树的遍历又可以扩展为图的遍历，因为图就是好几 N 叉棵树的结合 体。
你说图是可能出现环的?这个很好办，用个布尔数组 visited 做标记就 行了，这里就不写代码了。

所谓框架，就是套路。不管增删查改，这些代码都是永远无法脱离的结构， 你可以把这个结构作为大纲，根据具体问题在框架上添加代码就行了.


三、算法刷题指南
首先要明确的是，数据结构是工具，算法是通过合适的工具解决特定问题的 方法。也就是说，学习算法之前，最起码得了解那些常用的数据结构，了解 它们的特性和缺陷.
不说那 些不痛不痒的话，直接说具体的建议:
    先刷二叉树，先刷二叉树，先刷二叉树!
说一下题主刷题一年的心得体会：
    1. 黑人问号阶段；
    2. 开始刷二叉树；
    3. 发现框架；
    4. 飘了；
    5. 开刷动态规划；
    6. 自闭了。
    7. 发现动态规划套路；
    8. 佛系了。

大部分人对数据结构相关的算法文章不感兴 趣，而是更关心动规回溯分治等等技巧。
为什么要先刷二叉树呢，因为二叉 树是最容易培养框架思维的，而且大部分算法技巧，本质上都是树的遍历问题。
刷二叉树看到题目没思路?根据很多读者的问题，其实大家不是没思路，只 是没有理解我们说的「框架」是什么。
不要小看这几行破代码，几乎所有二 叉树的题目都是一套这个框架就出来了。
void traverse(TreeNode root) {
    // 前序遍历
    traverse(root.left)
    // 中序遍历
    traverse(root.right)
    // 后序遍历
}
随便拿几道题的解法出来，不用管具体的代码逻辑，只要看看框架在其中是如何发挥作用的就行。

对于一个理解二叉树的人来说，刷一道二叉树的题目花不了多⻓时间。那么 如果你对刷题无从下手或者有畏惧心理，不妨从二叉树下手，
前 10 道也许 有点难受;结合框架再做 20 道，也许你就有点自己的理解了;刷完整个专 题，再去做什么回溯动规分治专题，
你就会发现只要涉及递归的问题，都是 树的问题。


动态规划算法详解：
算法技巧就那几个套路，如果你心里有数，就会轻松很多，本文就来扒一扒动态规划的裤子，形成一套解决这类问题的思维框架。
动态规划问题的一般形式就是求最值。动态规划其实是运筹学的一种最优化 方法，只不过在计算机问题上应用比较多，
    比如说让你求最⻓递增子序列 呀，最小编辑距离呀等等。
既然是要求最值，核心问题是什么呢?求解动态规划的核心问题是穷举。因 为要求最值，肯定要把所有可行的答案穷举出来，然后在其中找最值呗。
动态规划就这么简单，就是穷举就完事了?我看到的动态规划问题都很难啊!
首先，动态规划的穷举有点特别，因为这类问题存在「重叠子问题」，如果 暴力穷举的话效率会极其低下，
    所以需要「备忘录」或者「DP table」来优 化穷举过程，避免不必要的计算。而且，动态规划问题一定会具备「最优子结构」，
    才能通过子问题的最值得 到原问题的最值。
另外，虽然动态规划的核心思想就是穷举求最值，但是问题可以千变万化， 穷举所有可行解其实并不是一件容易的事，只有列出正确的「状态转移方 程」才能正确地穷举。

以上提到的重叠子问题、最优子结构、状态转移方程就是动态规划三要素。 具体什么意思等会会举例详解，但是在实际的算法问题中，
写出状态转移方程是最困难的，这也就是为什么很多朋友觉得动态规划问题困难的原因，我来提供我研究出来的一个思维框架，
辅助你思考状态转移方程:
明确「状态」 -> 定义 dp 数组/函数的含义 -> 明确「选择」-> 明确 base case。

其中备忘录是自顶向下，dp是自底向上。
啥叫「自顶向下」?注意我们刚才画的递归树(或者说图)，是从上向下延 伸，都是从一个规模较大的原问题比如说 f(20) ，
 向下逐渐分解规模，直 到 f(1) 和 f(2) 触底，然后逐层返回答案，这就叫「自顶向下」。
啥叫「自底向上」?反过来，我们直接从最底下，最简单，问题规模最小的 f(1) 和 f(2) 开始往上推，直到推到我们想要的答案 f(20) ，
这就是动 态规划的思路，这也是为什么动态规划一般都脱离了递归，而是由循环迭代完成计算。

为啥叫「状态转移方程」?为了听起来高端。你把 f(n) 想做一个状态 n，这 个状态 n 是由状态 n - 1 和状态 n - 2 相加转移而来，
这就叫状态转移，仅此 而已。
先确定「状态」，也就是原问题和子问题中变化的变量。


